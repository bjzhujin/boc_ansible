#-----------------------------------------------------------playbook:----------------------------------------------------#
#---------------------------------------------X86云架构下额度管控系统(GLMS)澳门股票证券交易一键排查----------------------#
---
 - hosts: online_server
#------------------------------------------输入核心系统提供的交易码、账号、交易返回码信息--------------------------------#
   vars_prompt:
   - name: "tran_code"
     prompt: "请输入交易码："
     private: no

   - name: "account_no"
     prompt: "请输入核心系统交易账号："
     private: no

   - name: "retun_code"
     prompt: "请输入错误返回码："
     private: no

   - name: "db_user"
     prompt: "请输入数据库用户："
     private: no

   - name: "db_password"
     prompt: "请输入数据库密码："
     private: no
#    encrypt: "sha512_crypt"
     confirm: yes
#-------------------------------------------------------定义变量--------------------------------------------------------#
   vars:
    select_fact_var: "where student_id = 100;"
    app_dir: "mysql_tmp"
    mysql_tran_code_check_sh_name: "tran_code_check.sh"                                #交易码查询脚本名称    #
    mysql_account_no_check_sh_name: "account_no_check.sh"                              #账号查询脚本名称      #
    mysql_retun_code_check_sh_name: "retun_code_check.sh"                              #交易返回码查询脚本名称#
    mysql_sh_name: "mysql_run.sh"
#   db_user: "boc"                                                                     #数据库用户            # 
#   db_password: "BOChq999"                                                            #数据库密码            #
    db_server: "{%- for host in groups['db_server'] -%} {{ host }} {%- endfor -%}"
    mqm_name_tmp_list: []
    get_channel_status: []
    mq_channel_run_status: ["RUNNING"]

#***********************************************开始分布式并行任务****************************************************************#
   tasks:
    - name: delete tran_code 中的空格--转换变量
      set_fact: tran_code="{{ tran_code.replace(' ','') }}"
      run_once: true
      delegate_to: localhost
    - name: delete account_no 中的空格--转换变量
      set_fact: account_no="{{ account_no.replace(' ','') }}"
      run_once: true
      delegate_to: localhost
    - name: delete retun_code 中的空格--转换变量
      set_fact: retun_code="{{ retun_code.replace(' ','') }}"
      run_once: true
      delegate_to: localhost

#   - debug:
#      msg: "{{ item | length }}"
#     with_items:
#      - "{{ tran_code }}"
#      - "{{ account_no }}"
#      - "{{ retun_code }}"

#1=======================================以下数据库查询任务目的是检查核心系统提供的信息是否真实、有效=================================#
    - name: check shell dir
      file: 
        path: "{{ ansible_user_dir }}/{{ ansible_hostname }}/{{ app_dir }}"
        mode: 0755
        state: directory
      delegate_to: "{{ db_server }}"

#1.1-------------------------------- ----------块操作start（客户化数据库查询脚本并执行）-----------------------------------------------#

    - block:
  
      - name: copy_mysql_select_facts_参数化查询
        template:
           src: "{{ item }}"
           dest: "{{ ansible_user_dir }}/{{ ansible_hostname }}/{{ app_dir }}/{{ item.replace('.j2','') }}"
           mode: 0755
        with_items:
         - "{{ mysql_tran_code_check_sh_name }}.j2"
         - "{{ mysql_account_no_check_sh_name }}.j2"
         - "{{ mysql_retun_code_check_sh_name }}.j2" 

      always:
      - debug: msg="数据库查询脚本执行中，请等待！"
      - name: mysql_run.sh----running执行数据库表查询
        shell: "chdir={{ ansible_user_dir }}/{{ ansible_hostname }}/{{ app_dir }} removes={{ item }} {{ ansible_user_dir }}/{{ ansible_hostname }}/{{ app_dir }}/{{ item }}"
        register: mysql_run_sh_results
        with_items:
         - "{{ mysql_tran_code_check_sh_name }}"
         - "{{ mysql_account_no_check_sh_name }}"
         - "{{ mysql_retun_code_check_sh_name }}"

      rescue:
      - debug: msg="数据库查询脚本出错，请检查！"

      when:  tran_code | length  != 0 or  account_no | length  != 0 or  retun_code | length  != 0
      run_once: true
      delegate_to: "{{ db_server }}"
      ignore_errors: True
#1.1-----------------------------------------块操作end-------------------------------------------------------------------------------#

    - debug:
#        msg: "{{ item.stdout }}"
         msg: "{{ item.item }}----->{{ item.stdout }}"
      with_items:
         - "{{ mysql_run_sh_results.results }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: True

    - name: change mysql-run-sh-results--转换变量
      set_fact: "{{ item.item.replace('.sh','') }} = {{ item.stdout.split(',') }}"
      when: item.stdout.find(',') != -1
      with_items:
        - "{{ mysql_run_sh_results.results }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: True

    - name:  results-change_print 打印转换后的变量,并遍历数据
      debug:
        msg: "{%- for sub_item in item -%} {{ sub_item }} {%- endfor -%}"
      when: "{{ item }} is defined"
    # when: defined({{ item }})
      with_items:
         - "{{ mysql_tran_code_check_sh_name.replace('.sh','') }}"
         - "{{ mysql_account_no_check_sh_name.replace('.sh','') }}"
         - "{{ mysql_retun_code_check_sh_name.replace('.sh','') }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: True

    - name: print 打印非转换的单一结果变量
      debug:
    #   msg: “{{ item }}”
    #   msg: "{% for sub_check_result in mysql_run_sh_results.results %} {{ sub_check_result.item | match({{ item }}) }} {% endfor %}" 
        msg: "{%- for sub_check_result in mysql_run_sh_results.results -%} {%- if sub_check_result.item | match(item) -%}  {{ sub_check_result.stdout }} {%- endif -%} {%- endfor -%}" 
      when: "{{ item }} is undefined"
   #  when: undefined({{ item }})
      with_items:
         - "{{ mysql_tran_code_check_sh_name.replace('.sh','') }}"
         - "{{ mysql_account_no_check_sh_name.replace('.sh','') }}"
         - "{{ mysql_retun_code_check_sh_name.replace('.sh','') }}"
      run_once: true
      delegate_to: localhost
      ignore_errors: True

#1======================以上数据库查询脚本目的是检查核心系统提供的信息是否真实有效=====================#

#2========================================start检查MQ是否正常===============================================#

    - name: 提取MQ队列管理器名称
      shell: dspmq
      register: mqm_name_result


  # - debug:
  #     msg: "{{ mqm_name_result.stdout_lines }}"
  # - debug:
  #     msg: "{%- for sub_item in mqm_name_result.stdout_lines -%} {{ sub_item }} {%- endfor -%}"

    - debug:
        msg: "{{ item | regex_findall('\\((.*)\\)\\s+') }}"
      when: item.find('Running') != -1 
      with_items:
       - "{{ mqm_name_result.stdout_lines }}"

    - name: mqm_name_result-合并列表
      set_fact: mqm_name_tmp_list="{{ mqm_name_tmp_list }} + {{ item | regex_findall('\\((.*)\\)\\s+') }}" 
#     set_fact: mqm_name_tmp_list="{{ mqm_name_tmp_list }} + [ '{{ item }}' ]"
      when: item.find('Running') != -1
      with_items:
       - "{{ mqm_name_result.stdout_lines }}" 

    - debug:
        msg: "{{ item }}"
      with_items:
       - "{{ mqm_name_tmp_list }}"

    - name: 检查MQ通道状态
      shell: echo "dis chs (*)"|runmqsc {{ item }} 
      register: mqm_CHANNEL_check_result
      become: yes
      become_method: su
      become_user: mqm
      with_items:
       - "{{ mqm_name_tmp_list }}"

    - debug:
        msg: "{{ item.stdout_lines }}"
        verbosity: 0
      with_items:
       - "{{ mqm_CHANNEL_check_result.results }}"

    - name: 判断通道是否正常运行 
      include_tasks: mq_channel_check.yml
      with_items:
       - "{{ mqm_CHANNEL_check_result.results }}"
      loop_control:
        loop_var: channel_status_item

#2=========================================end检查MQ是否正常===============================================#


#   - name: change string--转换变量
#     set_fact: result_change=[]

    - name:  mysql_select_all_无参数化查询
      shell: mysql -u {{ db_user }} --password={{ db_password }} -h {{ db_server }} -N</root/mysql_tmp/select_table.sql
      #  chdir: /root/mysql_tmp
      delegate_to: "{{ db_server }}"
      register: mysql_result
      ignore_errors: True

    - debug:
       # msg: "{{ mysql_result.stdout_lines }}"
         var: mysql_result.stdout

    - name:   shell-command print
      command: echo {{ mysql_result.stdout_lines }}
      register: mysql_result_shell

    - debug:
       # msg: "{{ mysql_result.stdout_lines }}"
         var: mysql_result_shell

#   - name:   for print more results
#      debug:
#        msg="{% for i in {{ mysql_result.results }} %} {{ i.stdout }} {% endfor %}"

    - name: change more_result,change_string--转换变量
      set_fact: result_change="{{ mysql_result.stdout.split(',') }}"
      when: mysql_result.stdout.find(',') != -1


    - name:  wich_item_result_change_print 使用转换后的变量遍历数据
      debug:
        msg: "{%- for sub_item in item -%} {{ sub_item }} {%- endfor -%}"
      with_items:
        - "{{ result_change }}"
      when: result_change is defined 

    - name: print 非转换的单一结果
      debug:
        msg: “{{ mysql_result.stdout }}”
      when: result_change is undefined


    - name: change result_lines_string--转换变量
      set_fact: result_lines_change="{{ ",".join(mysql_result.stdout_lines) }}"

    - name:  wich_item_stdout_lines_print
      debug:
     #  msg: "{{ item }}"
        msg: "{%- for sub_item in item -%} {{ sub_item }} {%- endfor -%}"
      with_items: 
          - "{{ result_lines_change.split(',') }}"
